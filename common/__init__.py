"""Common classes and functions for the Matrixian Group Data Team.

Read the documentation on Confluence:
https://matrixiangroup.atlassian.net/wiki/spaces/DBR/pages/1584693297/common+classes+mx
"""

from __future__ import annotations

__all__ = (
    "__version__",
    "Address",
    "ApiError",
    "Checks",
    "CommonError",
    "ConnectorError",
    "Credentials",
    "DataError",
    # "DistributionPlot",
    "ESClient",
    "ESClientError",
    "EmailClient",
    "FileTransfer",
    "FileTransferDocker",
    "FileTransferFTP",
    "FileTransferError",
    "FunctionTimer",
    "Log",
    "Match",
    "MatchError",
    "MongoDB",
    "MongoDBError",
    "MySQLClient",
    "MySQLClientError",
    "Names",
    "NoMatch",
    "PandasSQL",
    "ParseError",
    "Person",
    "PersonsError",
    "PgSql",
    "PhoneApiError",
    # "PlotMx",
    "Query",
    # "RadarPlot",
    "RequestError",
    "SQLClient",
    "SQLtoMongo",
    "SSHClient",
    "Statistics",
    "ThreadSafeIterator",
    "TicToc",
    "Timeout",
    "Timer",
    "TimerError",
    "ZipData",
    "ZipDataError",
    "api",
    "assert_never",
    "calculate_bandwith",
    "change_secret",
    "check_email",
    "check_phone",
    "chunker",
    "compose",
    "connectors",
    "count_bytes",
    "csv_read",
    "csv_read_from_zip",
    "csv_write",
    "csv_write_to_zip",
    "customer_communication",
    "data_delivery_tool",
    "dateformat",
    "download_file",
    "drop_empty_columns",
    "env",
    "exceptions",
    "expand",
    "flatten",
    "get",
    "get_logger",
    "get_proxies",
    "get_secret",
    "get_session",
    "get_token",
    "getenv",
    "google_sign_url",
    "handlers",
    "keep_trying",
    "levenshtein",
    "parse",
    "parse_name",
    "parsers",
    "partition",
    "persons",
    "pip_upgrade",
    "platform",
    # "plot_stacked_bar",
    "post",
    "preload_db",
    "profile",
    "progress_bar_timer",
    "read_json",
    "read_json_line",
    "read_txt",
    "remove_adjacent",
    "request",
    "requests",
    "reverse_geocode",
    "secrets",
    "send_email",
    "set_alpha",
    "set_clean_email",
    "set_must_have_address",
    "set_population_size",
    "set_search_size",
    "set_years_ago",
    "thread",
    "thread_queue",
    "threadsafe",
    "timer",
    "tqdm",
    "trange",
    "validate",
    # "visualizations",
    "zip_file",
)

from importlib import import_module
from types import ModuleType

from .etc.version import __version__

_module_mapping = {
    "api": [
        "check_email",
        "check_phone",
        "parse",
        "validate",
    ],
    "connectors": [
        "ESClient",
        "EmailClient",
        "MongoDB",
        "MySQLClient",
        "PandasSQL",
        "PgSql",
        "SQLClient",
        "SQLtoMongo",
    ],
    "customer_communication": [
        "data_delivery_tool",
    ],
    "env": [
        "getenv",
    ],
    "exceptions": [
        "ApiError",
        "CommonError",
        "ConnectorError",
        "DataError",
        "ESClientError",
        "FileTransferError",
        "MatchError",
        "MongoDBError",
        "MySQLClientError",
        "NoMatch",
        "ParseError",
        "PersonsError",
        "PhoneApiError",
        "RequestError",
        "Timeout",
        "TimerError",
        "ZipDataError",
    ],
    "handlers": [
        "FunctionTimer",
        "Log",
        "TicToc",
        "Timer",
        "ZipData",
        "assert_never",
        "chunker",
        "compose",
        "csv_read",
        "csv_read_from_zip",
        "csv_write",
        "csv_write_to_zip",
        "get_logger",
        "keep_trying",
        "pip_upgrade",
        "profile",
        "progress_bar_timer",
        "read_json",
        "read_json_line",
        "read_txt",
        "remove_adjacent",
        "send_email",
        "timer",
        "tqdm",
        "trange",
        "zip_file",
    ],
    "parsers": [
        "Checks",
        "count_bytes",
        "dateformat",
        "drop_empty_columns",
        "expand",
        "flatten",
        "levenshtein",
        "partition",
        "reverse_geocode",
    ],
    "persons": [
        "Address",
        "Match",
        "Names",
        "Person",
        "Query",
        "Statistics",
        "parse_name",
        "preload_db",
        "set_alpha",
        "set_clean_email",
        "set_must_have_address",
        "set_population_size",
        "set_search_size",
        "set_years_ago",
    ],
    "platform": [
        "FileTransfer",
        "FileTransferDocker",
        "FileTransferFTP",
        "SSHClient",
    ],
    "requests": [
        "ThreadSafeIterator",
        "calculate_bandwith",
        "download_file",
        "google_sign_url",
        "get",
        "get_proxies",
        "get_session",
        "post",
        "request",
        "thread",
        "thread_queue",
        "threadsafe",
    ],
    "secrets": [
        "Credentials",
        "change_secret",
        "get_secret",
        "get_token",
    ],
    "visualizations": [
        "DistributionPlot",
        "PlotMx",
        "RadarPlot",
        "plot_stacked_bar",
    ],
}


def __getattr__(name: str) -> ModuleType:
    if name in _module_mapping:
        return import_module(f".{name}", __name__)
    for module, symbols in _module_mapping.items():
        if name in symbols:
            return getattr(import_module(f".{module}", __name__), name)
    raise ImportError(f"module {__name__!r} has no attribute {name!r}")


def __dir__() -> list[str]:
    return sorted(__all__)
